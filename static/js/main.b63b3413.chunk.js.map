{"version":3,"sources":["components/ruleta.js","App.js","serviceWorker.js","index.js"],"names":["Ruleta","ctx","items","startAngle","arc","Math","PI","length","spinTimeout","spinTime","spinTimeTotal","byte2Hex","n","String","substr","getColor","item","maxitem","g","b","frequency","red","sin","green","blue","drawRouletteWheel","canvas","canvasref","current","getContext","clearRect","strokeStyle","lineWidth","i","angle","drawRoulette","putText","name","drawArrow","element","outsideRadius","insideRadius","fillStyle","beginPath","stroke","fill","save","text","textRadius","shadowOffsetX","shadowOffsetY","shadowBlur","font","translate","cos","rotate","fillText","measureText","width","restore","moveTo","lineTo","rotateWheel","spinAngleStart","stopRotateWheel","spinAngle","easeOut","setTimeout","clearTimeout","degrees","arcd","index","floor","base_image","Image","src","image","onload","height","w","h","sizer","scalePreserveAspectRatio","drawImage","imgW","imgH","maxW","maxH","min","t","c","d","ts","useRef","useEffect","className","ref","onClick","random","spin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b63b3413.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nimport './ruleta.css'\n\nconst Ruleta = ({ items }) => {\n\n    let startAngle = 0;\n    let arc = Math.PI / (items.length / 2);\n    let spinTimeout = null;\n\n    let spinTime = 0;\n    let spinTimeTotal = 0;\n\n    let ctx;\n\n    const byte2Hex = (n) => {\n        var nybHexString = \"0123456789ABCDEF\";\n        return String(nybHexString.substr((n >> 4) & 0x0F, 1)) + nybHexString.substr(n & 0x0F, 1);\n    }\n\n    const RGB2Color = (r, g, b) => {\n        return '#' + byte2Hex(r) + byte2Hex(g) + byte2Hex(b);\n    }\n\n    const getColor = (item, maxitem) => {\n        var phase = 0;\n        var center = 128;\n        var width = 127;\n        var frequency = Math.PI * 2 / maxitem;\n\n        let red = Math.sin(frequency * item + 2 + phase) * width + center;\n        let green = Math.sin(frequency * item + 0 + phase) * width + center;\n        let blue = Math.sin(frequency * item + 4 + phase) * width + center;\n\n        return RGB2Color(red, green, blue);\n    }\n\n    const drawRouletteWheel = () => {\n        var canvas = canvasref.current\n        if (canvas.getContext) {\n            var outsideRadius = 200;\n            var textRadius = 160;\n            var insideRadius = 125;\n\n            ctx = canvas.getContext(\"2d\");\n            ctx.clearRect(0, 0, 500, 500);\n\n            ctx.strokeStyle = \"black\";\n            ctx.lineWidth = 2;\n\n            for (var i = 0; i < items.length; i++) {\n                var angle = startAngle + i * arc;\n                drawRoulette(ctx, outsideRadius, insideRadius, angle, arc, i, items.length)\n                putText(ctx, items[i].name, angle, arc, textRadius)\n                \n            }\n\n            //Arrow\n            drawArrow(ctx, outsideRadius)\n        }\n    }\n\n    const drawRoulette = (element, outsideRadius, insideRadius, angle, arc, i, length) => {\n        element.fillStyle = getColor(i, length);\n        element.beginPath();\n        element.arc(250, 250, outsideRadius, angle, angle + arc, false);\n        element.arc(250, 250, insideRadius, angle + arc, angle, true);\n        element.stroke();\n        element.fill();\n        element.save();\n    }\n\n    const putText = (element, text, angle, arc, textRadius) => {\n        element.shadowOffsetX = -1;\n        element.shadowOffsetY = -1;\n        element.shadowBlur = 0;\n        element.fillStyle = \"#000000\";\n        element.font = \"bold 16px Lato,Helvetica,Arial,Verdana,Tahoma,sans-serif\"\n        element.translate(250 + Math.cos(angle + arc / 2) * textRadius,\n            250 + Math.sin(angle + arc / 2) * textRadius);\n        element.rotate(angle + arc / 2 + Math.PI / 2);\n        \n        element.fillText(text, -ctx.measureText(text).width / 2, 0);\n        element.restore();\n    }\n\n    const drawArrow = (element, outsideRadius) => {\n        element.fillStyle = \"#F42534\";\n        element.beginPath();\n        element.moveTo(250 - 8, 220 - (outsideRadius + 10));\n        element.lineTo(250 + 8, 220 - (outsideRadius + 10));\n        element.lineTo(250 + 8, 220 - (outsideRadius - 10));\n        element.lineTo(250 + 18, 220 - (outsideRadius - 10));\n        element.lineTo(250 + 0, 220 - (outsideRadius - 26));\n        element.lineTo(250 - 18, 220 - (outsideRadius - 10));\n        element.lineTo(250 - 8, 220 - (outsideRadius - 10));\n        element.lineTo(250 - 8, 220 - (outsideRadius + 10));\n        element.fill();\n    }\n\n    const spin = () => {\n        const spinAngleStart = Math.random() * 10 + 10;\n        spinTime = 0;\n        spinTimeTotal = Math.random() * 3 + 4 * 1000;\n        rotateWheel(spinAngleStart);\n    }\n\n    const rotateWheel = (spinAngleStart) => {\n        spinTime += 30;\n        if (spinTime >= spinTimeTotal) {\n            stopRotateWheel();\n            return;\n        }\n        var spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);\n        startAngle += (spinAngle * Math.PI / 180);\n        drawRouletteWheel();\n        spinTimeout = setTimeout(() => rotateWheel(spinAngleStart), 30);\n    }\n\n    const stopRotateWheel = () => {\n        clearTimeout(spinTimeout);\n        var degrees = startAngle * 180 / Math.PI + 90;\n        var arcd = arc * 180 / Math.PI;\n        var index = Math.floor((360 - degrees % 360) / arcd);\n        ctx.save();        \n        var text = items[index].name\n        ctx.font = \"24px Arial\"\n        const base_image = new Image();\n        base_image.src = items[index].image;\n        base_image.onload = () => {\n            ctx.width=180;\n            ctx.height=180;\n            const w = base_image.width;\n            const h = base_image.height;\n            const sizer = scalePreserveAspectRatio(w,h,ctx.width,ctx.height);\n            ctx.drawImage(base_image,0,0,w,h,160,160,w*sizer,h*sizer);\n        }\n        //ctx.fillText(text, 250 - ctx.measureText(text).width / 2, 250 + 10);\n        ctx.restore();\n    }\n\n    const scalePreserveAspectRatio = (imgW,imgH,maxW,maxH) => {\n        return(Math.min((maxW/imgW),(maxH/imgH)));\n      }\n\n    const easeOut = (t, b, c, d) => {\n        var ts = (t /= d) * t;\n        var tc = ts * t;\n        return b + c * (tc + -3 * ts + 3 * t);\n    }\n\n\n    const canvasref = useRef();\n\n    useEffect(() => {\n        drawRouletteWheel()\n    });\n\n    return (\n        <div className=\"ruleta\">\n            <canvas\n                ref={canvasref}\n                className=\"\"\n                width=\"500\"\n                height=\"500\"\n            ></canvas>\n            <button\n                className={\"button--primary\"}\n                onClick={() => spin()}\n            >Girar</button>\n        </div>\n    )\n}\n\nexport default Ruleta","import React from 'react';\nimport Ruleta from './components/ruleta';\nimport './App.css';\n\nconst App = () => {\n  //const items = [\"Dany\", \"Carlangas\", \"Seba\", \"Alvarito\", \"Dámaris\", \"Jo\", \"Hervoy\", \"Diego\"];\n  const items = [\n    {\n      name: \"Álvaro\",\n      image: \"img/alvarito2.webp\"\n    },\n    {\n      name: \"Dámaris\",\n      image: \"img/damaris.webp\"\n    },\n    {\n      name: \"Carlitos\",\n      image: \"img/carlitos.webp\"\n    },\n    {\n      name: \"Jo\",\n      image: \"img/jo.webp\"\n    },\n    {\n      name: \"Daniel\",\n      image: \"img/daniel.webp\"\n    },\n    {\n      name: \"Seba\",\n      image: \"img/seba.webp\"\n    },\n    {\n      name: \"Hervoy\",\n      image: \"img/hervoy.webp\"\n    }\n  ]\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Ruleta items={items} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}