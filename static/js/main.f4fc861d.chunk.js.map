{"version":3,"sources":["repository/ruletaRepository.js","services/ruletaService.js","components/ruleta.js","App.js","serviceWorker.js","index.js"],"names":["RuletaRepository","axios","urlBase","getAllItems","a","async","get","response","data","console","log","message","changeStatusItems","item","id","getItemsActives","activeAllItems","ItemsService","ruletaRepository","state","active","Ruleta","ctx","useState","items","setItems","btnState","setBtnState","setItem","itemService","startAngle","arc","Math","PI","length","spinTimeout","spinTime","spinTimeTotal","byte2Hex","n","String","substr","getColor","maxitem","g","b","frequency","red","sin","green","blue","drawRouletteWheel","canvas","canvasref","current","getContext","clearRect","strokeStyle","lineWidth","i","angle","drawRoulette","putText","name","drawArrow","element","outsideRadius","insideRadius","fillStyle","beginPath","stroke","fill","save","text","textRadius","shadowOffsetX","shadowOffsetY","shadowBlur","font","translate","cos","rotate","fillText","measureText","width","restore","moveTo","lineTo","rotateWheel","spinAngleStart","stopRotateWheel","spinAngle","easeOut","setTimeout","clearTimeout","degrees","arcd","index","floor","itm","base_image","Image","src","url","onload","height","w","h","sizer","scalePreserveAspectRatio","drawImage","cleanRoulette","getItems","its","restartItems","imgW","imgH","maxW","maxH","min","t","c","d","ts","useRef","useEffect","className","ref","ButtonToolbar","Button","variant","onClick","random","spin","ToggleButtonGroup","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4fc861d.chunk.js","sourcesContent":["const RuletaRepository = ({ axios, urlBase }) => {\n    const getAllItems = async () => {\n        try {\n            const response = await axios.get(`${urlBase}/getAllItems`);\n            return response.data; \n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return []\n        }\n    }\n    \n    const changeStatusItems = async (item) => {\n        try {\n            await axios.get(`${urlBase}/changeItemsId/${item.id}`)\n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return 0\n        }\n    }\n\n    const getItemsActives = async () => {\n        try {\n            const response = await axios.get(`${urlBase}/getItems`);\n            return response.data; \n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return []\n        }\n    }\n\n    const activeAllItems = async () => {\n        try {\n            const response = await axios.get(`${urlBase}/activeAllItems`);\n            return response.data; \n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return []\n        }\n    }\n\n    return {\n        getAllItems,\n        changeStatusItems,\n        getItemsActives,\n        activeAllItems\n    }\n}\n\nexport default RuletaRepository","import RuletaRepository from '../repository/ruletaRepository'\n\nconst ItemsService = ({ axios, urlBase }) => {\n    const ruletaRepository = RuletaRepository({ axios, urlBase });\n\n    const getItemsActives = async () => {\n        try {\n            return await ruletaRepository.getItemsActives();\n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return []\n        }\n    }\n    \n    const changeStatusItems = async (item, state) => {\n        try {\n            return await ruletaRepository.changeStatusItems({ ...item, active: state })\n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return 0\n        }\n    }\n\n    const getAllItems = async () => {\n        try {\n            return await ruletaRepository.getAllItems();\n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return []\n        }\n    }\n\n    const activeAllItems = async () => {\n        try {\n            return await ruletaRepository.activeAllItems();\n        } catch (error) {\n            console.log('ERROR =>', error.message)\n            return []\n        }\n    }\n\n    return {\n        getItemsActives,\n        changeStatusItems,\n        getAllItems,\n        activeAllItems\n    }\n}\n\nexport default ItemsService","import React, { useRef, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport ItemsService from '../services/ruletaService';\nimport './ruleta.css'\nimport { Button, ButtonToolbar, ToggleButtonGroup, ToggleButton } from 'react-bootstrap';\n\nconst Ruleta = () => {\n    const [items, setItems] = useState([]);\n    const [btnState, setBtnState] = useState(true);\n    const [item, setItem] = useState({});\n    const itemService = ItemsService({axios, urlBase: 'https://api-roulette.herokuapp.com/roulette'});\n    let startAngle = 0;\n    let arc = Math.PI / (items.length / 2);\n    let spinTimeout = null;\n\n    let spinTime = 0;\n    let spinTimeTotal = 0;\n\n    let ctx;\n\n    const byte2Hex = (n) => {\n        const nybHexString = \"0123456789ABCDEF\";\n        return String(nybHexString.substr((n >> 4) & 0x0F, 1)) + nybHexString.substr(n & 0x0F, 1);\n    }\n\n    const RGB2Color = (r, g, b) => {\n        return '#' + byte2Hex(r) + byte2Hex(g) + byte2Hex(b);\n    }\n\n    const getColor = (item, maxitem) => {\n        const phase = 0;\n        const center = 128;\n        const width = 127;\n        const frequency = Math.PI * 2 / maxitem;\n\n        const red = Math.sin(frequency * item + 2 + phase) * width + center;\n        const green = Math.sin(frequency * item + 0 + phase) * width + center;\n        const blue = Math.sin(frequency * item + 4 + phase) * width + center;\n\n        return RGB2Color(red, green, blue);\n    }\n\n    const drawRouletteWheel = () => {\n        const canvas = canvasref.current\n        if (canvas.getContext) {\n            const outsideRadius = 200;\n            const textRadius = 160;\n            const insideRadius = 125;\n\n            ctx = canvas.getContext(\"2d\");\n            ctx.clearRect(0, 0, 500, 500);\n\n            ctx.strokeStyle = \"black\";\n            ctx.lineWidth = 2;\n            //console.log(items)\n            for (let i = 0; i < items.length; i++) {\n                const angle = startAngle + i * arc;\n                drawRoulette(ctx, outsideRadius, insideRadius, angle, arc, i, items.length)\n                putText(ctx, items[i].name, angle, arc, textRadius)\n                \n            }\n\n            //Arrow\n            drawArrow(ctx, outsideRadius)\n        }\n    }\n\n    const drawRoulette = (element, outsideRadius, insideRadius, angle, arc, i, length) => {\n        element.fillStyle = getColor(i, length);\n        element.beginPath();\n        element.arc(250, 250, outsideRadius, angle, angle + arc, false);\n        element.arc(250, 250, insideRadius, angle + arc, angle, true);\n        element.stroke();\n        element.fill();\n        element.save();\n    }\n\n    const putText = (element, text, angle, arc, textRadius) => {\n        element.shadowOffsetX = -1;\n        element.shadowOffsetY = -1;\n        element.shadowBlur = 0;\n        element.fillStyle = \"#000000\";\n        element.font = \"bold 16px Lato,Helvetica,Arial,Verdana,Tahoma,sans-serif\"\n        element.translate(250 + Math.cos(angle + arc / 2) * textRadius,\n            250 + Math.sin(angle + arc / 2) * textRadius);\n        element.rotate(angle + arc / 2 + Math.PI / 2);\n        \n        element.fillText(text, -ctx.measureText(text).width / 2, 0);\n        element.restore();\n    }\n\n    const drawArrow = (element, outsideRadius) => {\n        element.fillStyle = \"#F42534\";\n        element.beginPath();\n        element.moveTo(250 - 8, 220 - (outsideRadius + 10));\n        element.lineTo(250 + 8, 220 - (outsideRadius + 10));\n        element.lineTo(250 + 8, 220 - (outsideRadius - 10));\n        element.lineTo(250 + 18, 220 - (outsideRadius - 10));\n        element.lineTo(250 + 0, 220 - (outsideRadius - 26));\n        element.lineTo(250 - 18, 220 - (outsideRadius - 10));\n        element.lineTo(250 - 8, 220 - (outsideRadius - 10));\n        element.lineTo(250 - 8, 220 - (outsideRadius + 10));\n        element.fill();\n    }\n\n    const spin = () => {\n        const spinAngleStart = Math.random() * 10 + 10;\n        spinTime = 0;\n        spinTimeTotal = Math.random() * 3 + 4 * 1000;\n        rotateWheel(spinAngleStart);\n    }\n\n    const rotateWheel = (spinAngleStart) => {\n        spinTime += 30;\n        if (spinTime >= spinTimeTotal) {\n            stopRotateWheel();\n            return;\n        }\n        const spinAngle = spinAngleStart - easeOut(spinTime, 0, spinAngleStart, spinTimeTotal);\n        startAngle += (spinAngle * Math.PI / 180);\n        drawRouletteWheel();\n        spinTimeout = setTimeout(() => rotateWheel(spinAngleStart), 30);\n    }\n\n    const stopRotateWheel = async () => {\n        clearTimeout(spinTimeout);\n        const degrees = startAngle * 180 / Math.PI + 90;\n        const arcd = arc * 180 / Math.PI;\n        const index = Math.floor((360 - degrees % 360) / arcd);\n        const itm = items[index];\n        setItem(itm)\n        console.log(item)\n        \n        ctx.save();        \n        ctx.font = \"24px Arial\"\n        const base_image = new Image();\n        base_image.src = itm.url;\n        base_image.onload = async () => {\n            ctx.width=180;\n            ctx.height=180;\n            const w = base_image.width;\n            const h = base_image.height;\n            const sizer = scalePreserveAspectRatio(w,h,ctx.width,ctx.height);\n            ctx.drawImage(base_image,0,0,w,h,160,160,w*sizer,h*sizer);\n            setBtnState(false);\n        }\n        ctx.restore();\n    }\n\n    const cleanRoulette = async () => {\n        try {\n            await setBtnState(true);\n            const its = await getItems();\n            await restartItems(its);\n        } catch (error) {\n            console.log(`ERROR =>`, error.message)\n        }\n    }\n\n    const saveItem = async () => {\n        await itemService.changeStatusItems(item, false);\n        cleanRoulette()\n    }\n\n    const scalePreserveAspectRatio = (imgW,imgH,maxW,maxH) => (Math.min((maxW/imgW),(maxH/imgH)));\n\n    const easeOut = (t, b, c, d) => {\n        const ts = (t /= d) * t;\n        const tc = ts * t;\n        return b + c * (tc + -3 * ts + 3 * t);\n    }\n\n\n    const canvasref = useRef();\n\n    const getItems = async () => {\n        const items = await itemService.getItemsActives();\n        console.log(items)\n        await setItems(items)\n        return items\n    }\n\n    const restartItems = async (its) => {\n        console.log('restartItems', its.length)\n        if (its.length === 0) {\n            await itemService.activeAllItems()\n            await getItems();\n        }\n    }\n\n    useEffect(()=>{\n        getItems();\n    },[]);\n\n    useEffect(() => {\n        drawRouletteWheel()\n    }, [items]);\n\n    const test = () => {\n        console.log(1)\n    }\n    \n\n    return (\n        <div className=\"ruleta\">\n            <canvas\n                ref={canvasref}\n                className=\"\"\n                width=\"500\"\n                height=\"500\"\n            ></canvas>\n            <ButtonToolbar>\n                {\n                    btnState ?\n                    <Button\n                        variant=\"success\"\n                        onClick={() => spin()}\n                        active={false}\n                    >Girar</Button>:\n                    <ToggleButtonGroup type=\"checkbox\">\n                        <Button \n                            variant=\"warning\" \n                            onClick={cleanRoulette}\n                        >Limpiar</Button>\n                        <Button \n                            variant=\"success\" \n                            onClick={saveItem}\n                        >Guardar</Button>\n                    </ToggleButtonGroup>\n                }\n            </ButtonToolbar>\n\n            \n        </div>\n    )\n}\n\nexport default Ruleta","import React from 'react';\nimport Ruleta from './components/ruleta';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Ruleta />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}